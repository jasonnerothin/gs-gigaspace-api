apply plugin: 'scala'
apply plugin: 'ear' // override later to make a Processing Unit (jar)

// this type of variable declaration is deprecated and will be removed in gradle >= 3
localRepo = "/Users/jason/.m2/repository" //"$System.env.M2_REPO" ~works, but IntelliJ doesn't like it
jsHomedir = "/Users/jason/gigaspaces-xap-premium-9.7.0-ga" //"$System.env.JSHOMEDIR" ~works, but IntelliJ doesn't like it
gsFolder = localRepo + '/com/gigaspaces/'
gsScalaLibDir = jsHomedir + '/lib/platform/scala/'
gigaSpacesVersion = '9.7.0-10496-RELEASE'

repositories {
    mavenCentral()
}

ensureDirectory(localRepo)
ensureDirectory(gsFolder)
ensureDirectory(jsHomedir)
ensureDirectory(gsScalaLibDir)

def ensureDirectory(directoryPath) {
    dir = new File(directoryPath)
    if (!dir.exists())
        throw new IllegalStateException(String.format("Directory %s does not exist.", directoryPath))
    if (!dir.isDirectory())
        throw new IllegalStateException(String.format("File %s is not a directory.", directoryPath))
}

dependencies {

    compile 'org.scala-lang:scala-library:2.10.3'

    compile files(gsFolder + 'gs-openspaces/' + gigaSpacesVersion + '/gs-openspaces-' + gigaSpacesVersion + '.jar')
    compile files(gsFolder + 'gs-runtime/' + gigaSpacesVersion + '/gs-runtime-' + gigaSpacesVersion + '.jar')

    compile 'org.slf4j:slf4j-api:1.7.5'
    compile 'ch.qos.logback:logback-core:1.0.13'
    compile 'ch.qos.logback:logback-classic:1.0.13'

    // all other lib dependencies are either test ones or provided by the GigaSpaces distribution
    earlib group: 'org.scala-lang', name: 'scala-library', version: '2.10.3', ext: 'jar'
    earlib group: 'org.slf4j', name: 'slf4j-api', version: '1.7.5', ext: 'jar'
    earlib group: 'ch.qos.logback', name: 'logback-core', version: '1.0.13', ext: 'jar'
    earlib group: 'ch.qos.logback', name: 'logback-classic', version: '1.0.13', ext: 'jar'

    // GS REQUIRED LIBS
    // todo not sure if we really shouldn't move some of these over to 'provided' from 'compile'
    compile 'org.springframework:spring-aop:3.1.3.RELEASE'
    compile 'org.springframework:spring-aspects:3.1.3.RELEASE'
    compile 'org.springframework:spring-beans:3.1.3.RELEASE'
    compile 'org.springframework:spring-context:3.1.3.RELEASE'
    compile 'org.springframework:spring-context-support:3.1.3.RELEASE'
    compile 'org.springframework:spring-core:3.1.3.RELEASE'
    compile 'org.springframework:spring-expression:3.1.3.RELEASE'
    compile 'org.springframework:spring-tx:3.1.3.RELEASE'
    compile 'aopalliance:aopalliance:1.0'
    compile 'commons-logging:commons-logging:1.1.3'

    testCompile 'org.scalatest:scalatest_2.10:2.0'
    testCompile 'org.scalamock:scalamock-scalatest-support_2.10:3.0.1'
    testCompile 'org.scalamock:scalamock-specs2-support_2.10:3.0.1'
    testCompile 'junit:junit:4.11'

}

task listJars << {
    configurations.compile.each { File file -> println file.name }
}

ear {
    libDirName 'lib'
    doLast{
        file("build/libs/gs-gigaspace-api.ear").renameTo(file("build/libs/gigaspace-api-pu.jar"))
    }
}

tasks.withType(ScalaCompile) {
    configure(scalaCompileOptions.forkOptions) {
        memoryMaximumSize = '4g'
        jvmArgs = ['-XX:MaxPermSize=512m']
    }
    scalaCompileOptions.useAnt = false
    scalaCompileOptions.setAdditionalParameters(['-feature'])
}

task test(overwrite: true, dependsOn: testClasses) << {
    ant.taskdef(name: 'scalatest', classname: 'org.scalatest.tools.ScalaTestAntTask', classpath: sourceSets.test.runtimeClasspath.asPath)
    ant.scalatest(runpath: sourceSets.test.output.classesDir, haltonfailure: 'true', fork: 'false') {
        reporter(type: 'stdout')
    }
}
